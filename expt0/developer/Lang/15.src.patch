diff --git a/org/apache/commons/lang3/reflect/TypeUtils.java b/org/apache/commons/lang3/reflect/TypeUtils.java
index 8db8abf..ed9dc3f 100644
--- a/org/apache/commons/lang3/reflect/TypeUtils.java
+++ b/org/apache/commons/lang3/reflect/TypeUtils.java
@@ -216,9 +216,9 @@ public class TypeUtils {
                 toClass, typeVarAssigns);
 
         // now to check each type argument
-        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {
-            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);
-            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);
+        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {
+            Type toTypeArg = entry.getValue();
+            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());
 
             // parameters must either be absent from the subject type, within
             // the bounds of the wildcard type, or be an exact match to the
@@ -234,18 +234,6 @@ public class TypeUtils {
         return true;
     }
 
-    private static Type unrollVariableAssignments(TypeVariable<?> var, Map<TypeVariable<?>, Type> typeVarAssigns) {
-        Type result;
-        do {
-            result = typeVarAssigns.get(var);
-            if (result instanceof TypeVariable<?> && !result.equals(var)) {
-                var = (TypeVariable<?>) result;
-                continue;
-            }
-            break;
-        } while (true);
-        return result;
-    }
 
     /**
      * <p> Checks if the subject type may be implicitly cast to the target
@@ -672,7 +660,7 @@ public class TypeUtils {
                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);
 
         // has target class been reached?
-        if (toClass.equals(cls)) {
+        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {
             return typeVarAssigns;
         }
 
