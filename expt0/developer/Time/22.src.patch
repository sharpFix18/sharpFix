diff --git a/org/joda/time/MutablePeriod.java b/org/joda/time/MutablePeriod.java
index 78db791..4e40d55 100644
--- a/org/joda/time/MutablePeriod.java
+++ b/org/joda/time/MutablePeriod.java
@@ -177,7 +177,7 @@ public class MutablePeriod
      * @param duration  the duration, in milliseconds
      */
     public MutablePeriod(long duration) {
-        super(duration);
+        super(duration, null, null);
     }
 
     /**
diff --git a/org/joda/time/Period.java b/org/joda/time/Period.java
index 7ec8072..1e0a6d8 100644
--- a/org/joda/time/Period.java
+++ b/org/joda/time/Period.java
@@ -379,7 +379,7 @@ public final class Period
      * @param duration  the duration, in milliseconds
      */
     public Period(long duration) {
-        super(duration);
+        super(duration, null, null);
     }
 
     /**
diff --git a/org/joda/time/base/BasePeriod.java b/org/joda/time/base/BasePeriod.java
index a5dcb74..e2da9f0 100644
--- a/org/joda/time/base/BasePeriod.java
+++ b/org/joda/time/base/BasePeriod.java
@@ -211,24 +210,6 @@ public abstract class BasePeriod
     }
 
     /**
-     * Creates a period from the given millisecond duration with the standard period type
-     * and ISO rules, ensuring that the calculation is performed with the time-only period type.
-     * <p>
-     * The calculation uses the hour, minute, second and millisecond fields.
-     *
-     * @param duration  the duration, in milliseconds
-     */
-    protected BasePeriod(long duration) {
-        super();
-        // bug [3264409]
-        iType = PeriodType.time();
-        int[] values = ISOChronology.getInstanceUTC().get(this, duration);
-        iType = PeriodType.standard();
-        iValues = new int[8];
-        System.arraycopy(values, 0, iValues, 4, 4);
-    }
-
-    /**
      * Creates a period from the given millisecond duration, which is only really
      * suitable for durations less than one day.
      * <p>
