diff --git a/org/joda/time/Period.java b/org/joda/time/Period.java
index 5ea67a7..5b36bc5 100644
--- a/org/joda/time/Period.java
+++ b/org/joda/time/Period.java
@@ -1614,30 +1614,23 @@ public final class Period
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
-        type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            long totalMonths = years * 12L + months;
-            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
-                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
-                result = result.withYears(normalizedYears);
-                totalMonths = totalMonths - (normalizedYears * 12);
-            }
-            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
-                int normalizedMonths = FieldUtils.safeToInt(totalMonths);
-                result = result.withMonths(normalizedMonths);
-                totalMonths = totalMonths - normalizedMonths;
+            years = FieldUtils.safeAdd(years, months / 12);
+            months = months % 12;
+            if (years != 0) {
+                result = result.withYears(years);
             }
-            if (totalMonths != 0) {
-                throw new UnsupportedOperationException("Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: " + toString());
+            if (months != 0) {
+                result = result.withMonths(months);
             }
         }
         return result;
