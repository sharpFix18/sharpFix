Index: org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java
===================================================================
--- org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java	(revision 231)
+++ org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java	(revision 227)
@@ -120,14 +119,12 @@
      *
      * @param list  a collection of values from which the various medians will 
      *              be calculated.
-     * @param rowKey  the row key (<code>null</code> not permitted).
-     * @param columnKey  the column key (<code>null</code> not permitted).
-     * 
-     * @see #add(BoxAndWhiskerItem, Comparable, Comparable)
+     * @param rowKey  the row key.
+     * @param columnKey  the column key.
      */
     public void add(List list, Comparable rowKey, Comparable columnKey) {
-        BoxAndWhiskerItem item = BoxAndWhiskerCalculator
-                .calculateBoxAndWhiskerStatistics(list);
+        BoxAndWhiskerItem item 
+            = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(list);
         add(item, rowKey, columnKey);
     }
     
@@ -136,60 +133,62 @@
      * table.  The various median values are calculated.
      *
      * @param item  a box and whisker item (<code>null</code> not permitted).
-     * @param rowKey  the row key (<code>null</code> not permitted).
-     * @param columnKey  the column key (<code>null</code> not permitted).
-     * 
-     * @see #add(List, Comparable, Comparable)
+     * @param rowKey  the row key.
+     * @param columnKey  the column key.
      */
-    public void add(BoxAndWhiskerItem item, Comparable rowKey, 
-            Comparable columnKey) {
+    public void add(BoxAndWhiskerItem item, 
+                    Comparable rowKey, 
+                    Comparable columnKey) {
 
         this.data.addObject(item, rowKey, columnKey);
         
         // update cached min and max values
         int r = this.data.getRowIndex(rowKey);
         int c = this.data.getColumnIndex(columnKey);
-        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn 
-                == c) || (this.minimumRangeValueRow == r 
-                && this.minimumRangeValueColumn == c))  {
-            updateBounds();
+        if (this.maximumRangeValueRow == r 
+                && this.maximumRangeValueColumn == c) {
+            this.maximumRangeValue = Double.NaN;
         }
-        else {
+        if (this.minimumRangeValueRow == r 
+                && this.minimumRangeValueColumn == c) {
+            this.minimumRangeValue = Double.NaN;
+        }
         
-            double minval = Double.NaN;
-            if (item.getMinOutlier() != null) {
-                minval = item.getMinOutlier().doubleValue();
-            }
-            double maxval = Double.NaN;
-            if (item.getMaxOutlier() != null) {
-                maxval = item.getMaxOutlier().doubleValue();
-            }
         
-            if (Double.isNaN(this.maximumRangeValue)) {
-                this.maximumRangeValue = maxval;
-                this.maximumRangeValueRow = r;
-                this.maximumRangeValueColumn = c;
-            }
-            else if (maxval > this.maximumRangeValue) {
-                this.maximumRangeValue = maxval;
-                this.maximumRangeValueRow = r;
-                this.maximumRangeValueColumn = c;
-            }
+        double minval = Double.NaN;
+        if (item.getMinOutlier() != null) {
+            minval = item.getMinOutlier().doubleValue();
+        }
+        double maxval = Double.NaN;
+        if (item.getMaxOutlier() != null) {
+            maxval = item.getMaxOutlier().doubleValue();
+        }
         
-            if (Double.isNaN(this.minimumRangeValue)) {
-                this.minimumRangeValue = minval;
-                this.minimumRangeValueRow = r;
-                this.minimumRangeValueColumn = c;
-            }
-            else if (minval < this.minimumRangeValue) {
-                this.minimumRangeValue = minval;
-                this.minimumRangeValueRow = r;
-                this.minimumRangeValueColumn = c;
-            }
+        if (Double.isNaN(this.maximumRangeValue)) {
+            this.maximumRangeValue = maxval;
+            this.maximumRangeValueRow = r;
+            this.maximumRangeValueColumn = c;
         }
+        else if (maxval > this.maximumRangeValue) {
+            this.maximumRangeValue = maxval;
+            this.maximumRangeValueRow = r;
+            this.maximumRangeValueColumn = c;
+        }
         
+        if (Double.isNaN(this.minimumRangeValue)) {
+            this.minimumRangeValue = minval;
+            this.minimumRangeValueRow = r;
+            this.minimumRangeValueColumn = c;
+        }
+        else if (minval < this.minimumRangeValue) {
+            this.minimumRangeValue = minval;
+            this.minimumRangeValueRow = r;
+            this.minimumRangeValueColumn = c;
+        }
+        
         this.rangeBounds = new Range(this.minimumRangeValue,
               this.maximumRangeValue);
+
         fireDatasetChanged();
 
     }
@@ -735,52 +678,6 @@
     }
     
     /**
-     * Resets the cached bounds, by iterating over the entire dataset to find
-     * the current bounds.
-     */
-    private void updateBounds() {
-        this.minimumRangeValue = Double.NaN;
-        this.minimumRangeValueRow = -1;
-        this.minimumRangeValueColumn = -1;
-        this.maximumRangeValue = Double.NaN;
-        this.maximumRangeValueRow = -1;
-        this.maximumRangeValueColumn = -1;
-        int rowCount = getRowCount();
-        int columnCount = getColumnCount();
-        for (int r = 0; r < rowCount; r++) {
-            for (int c = 0; c < columnCount; c++) {
-                BoxAndWhiskerItem item = getItem(r, c);
-                if (item != null) {
-                    Number min = item.getMinOutlier();
-                    if (min != null) {
-                        double minv = min.doubleValue();
-                        if (!Double.isNaN(minv)) {
-                            if (minv < this.minimumRangeValue || Double.isNaN(
-                                    this.minimumRangeValue)) {
-                                this.minimumRangeValue = minv;
-                                this.minimumRangeValueRow = r;
-                                this.minimumRangeValueColumn = c;
-                            }
-                        }
-                    }
-                    Number max = item.getMaxOutlier();
-                    if (max != null) {
-                        double maxv = max.doubleValue();
-                        if (!Double.isNaN(maxv)) {
-                            if (maxv > this.maximumRangeValue || Double.isNaN(
-                                    this.maximumRangeValue)) {
-                                this.maximumRangeValue = maxv;
-                                this.maximumRangeValueRow = r;
-                                this.maximumRangeValueColumn = c;
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-    
-    /**
      * Tests this dataset for equality with an arbitrary object.
      * 
      * @param obj  the object to test against (<code>null</code> permitted).
