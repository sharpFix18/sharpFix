Index: org/jfree/chart/plot/MultiplePiePlot.java
===================================================================
--- org/jfree/chart/plot/MultiplePiePlot.java	(revision 852)
+++ org/jfree/chart/plot/MultiplePiePlot.java	(revision 846)
@@ -90,65 +88,65 @@
 import org.jfree.data.general.PieDataset;
 
 /**
- * A plot that displays multiple pie plots using data from a
+ * A plot that displays multiple pie plots using data from a 
  * {@link CategoryDataset}.
  */
 public class MultiplePiePlot extends Plot implements Cloneable, Serializable {
-
+    
     /** For serialization. */
     private static final long serialVersionUID = -355377800470807389L;
-
+    
     /** The chart object that draws the individual pie charts. */
     private JFreeChart pieChart;
-
+    
     /** The dataset. */
     private CategoryDataset dataset;
-
+    
     /** The data extract order (by row or by column). */
     private TableOrder dataExtractOrder;
-
+    
     /** The pie section limit percentage. */
     private double limit = 0.0;
-
-    /**
-     * The key for the aggregated items.
+    
+    /** 
+     * The key for the aggregated items. 
      * @since 1.0.2
      */
     private Comparable aggregatedItemsKey;
-
-    /**
-     * The paint for the aggregated items.
+    
+    /** 
+     * The paint for the aggregated items. 
      * @since 1.0.2
      */
     private transient Paint aggregatedItemsPaint;
-
-    /**
-     * The colors to use for each section.
+    
+    /** 
+     * The colors to use for each section. 
      * @since 1.0.2
      */
     private transient Map sectionPaints;
-
+    
     /**
      * Creates a new plot with no data.
      */
     public MultiplePiePlot() {
         this(null);
     }
-
+    
     /**
      * Creates a new plot.
-     *
+     * 
      * @param dataset  the dataset (<code>null</code> permitted).
      */
     public MultiplePiePlot(CategoryDataset dataset) {
         super();
-        setDataset(dataset);
+        this.dataset = dataset;
         PiePlot piePlot = new PiePlot(null);
         this.pieChart = new JFreeChart(piePlot);
         this.pieChart.removeLegend();
         this.dataExtractOrder = TableOrder.BY_COLUMN;
         this.pieChart.setBackgroundPaint(null);
-        TextTitle seriesTitle = new TextTitle("Series Title",
+        TextTitle seriesTitle = new TextTitle("Series Title", 
                 new Font("SansSerif", Font.BOLD, 12));
         seriesTitle.setPosition(RectangleEdge.BOTTOM);
         this.pieChart.setTitle(seriesTitle);
@@ -156,24 +154,24 @@
         this.aggregatedItemsPaint = Color.lightGray;
         this.sectionPaints = new HashMap();
     }
-
+    
     /**
      * Returns the dataset used by the plot.
-     *
+     * 
      * @return The dataset (possibly <code>null</code>).
      */
     public CategoryDataset getDataset() {
-        return this.dataset;
+        return this.dataset;   
     }
-
+    
     /**
      * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
      * to all registered listeners.
-     *
+     * 
      * @param dataset  the dataset (<code>null</code> permitted).
      */
     public void setDataset(CategoryDataset dataset) {
-        // if there is an existing dataset, remove the plot from the list of
+        // if there is an existing dataset, remove the plot from the list of 
         // change listeners...
         if (this.dataset != null) {
             this.dataset.removeChangeListener(this);
@@ -320,19 +318,19 @@
         this.aggregatedItemsPaint = paint;
         fireChangeEvent();
     }
-
+    
     /**
      * Returns a short string describing the type of plot.
      *
      * @return The plot type.
      */
     public String getPlotType() {
-        return "Multiple Pie Plot";
+        return "Multiple Pie Plot";  
          // TODO: need to fetch this from localised resources
     }
 
     /**
-     * Draws the plot on a Java 2D graphics device (such as the screen or a
+     * Draws the plot on a Java 2D graphics device (such as the screen or a 
      * printer).
      *
      * @param g2  the graphics device.
@@ -341,19 +339,19 @@
      * @param parentState  the state from the parent plot, if there is one.
      * @param info  collects info about the drawing.
      */
-    public void draw(Graphics2D g2,
+    public void draw(Graphics2D g2, 
                      Rectangle2D area,
                      Point2D anchor,
                      PlotState parentState,
                      PlotRenderingInfo info) {
-
-
+        
+       
         // adjust the drawing area for the plot insets (if any)...
         RectangleInsets insets = getInsets();
         insets.trim(area);
         drawBackground(g2, area);
         drawOutline(g2, area);
-
+        
         // check that there is some data to display...
         if (DatasetUtilities.isEmptyOrNull(this.dataset)) {
             drawNoDataMessage(g2, area);
@@ -370,7 +368,7 @@
 
         // the columns variable is always >= rows
         int displayCols = (int) Math.ceil(Math.sqrt(pieCount));
-        int displayRows
+        int displayRows 
             = (int) Math.ceil((double) pieCount / (double) displayCols);
 
         // swap rows and columns to match plotArea shape
@@ -393,7 +391,7 @@
         Rectangle rect = new Rectangle();
 
         for (int pieIndex = 0; pieIndex < pieCount; pieIndex++) {
-            rect.setBounds(x + xoffset + (width * column), y + (height * row),
+            rect.setBounds(x + xoffset + (width * column), y + (height * row), 
                     width, height);
 
             String title = null;
@@ -404,9 +402,9 @@
                 title = this.dataset.getColumnKey(pieIndex).toString();
             }
             this.pieChart.setTitle(title);
-
+            
             PieDataset piedataset = null;
-            PieDataset dd = new CategoryToPieDataset(this.dataset,
+            PieDataset dd = new CategoryToPieDataset(this.dataset, 
                     this.dataExtractOrder, pieIndex);
             if (this.limit > 0.0) {
                 piedataset = DatasetUtilities.createConsolidatedPieDataset(
@@ -455,26 +453,26 @@
         }
 
     }
-
+    
     /**
      * For each key in the dataset, check the <code>sectionPaints</code>
-     * cache to see if a paint is associated with that key and, if not,
+     * cache to see if a paint is associated with that key and, if not, 
      * fetch one from the drawing supplier.  These colors are cached so that
      * the legend and all the subplots use consistent colors.
      */
     private void prefetchSectionPaints() {
-
+        
         // pre-fetch the colors for each key...this is because the subplots
         // may not display every key, but we need the coloring to be
         // consistent...
-
+        
         PiePlot piePlot = (PiePlot) getPieChart().getPlot();
-
+        
         if (this.dataExtractOrder == TableOrder.BY_ROW) {
             // column keys provide potential keys for individual pies
             for (int c = 0; c < this.dataset.getColumnCount(); c++) {
                 Comparable key = this.dataset.getColumnKey(c);
-                Paint p = piePlot.getSectionPaint(key);
+                Paint p = piePlot.getSectionPaint(key); 
                 if (p == null) {
                     p = (Paint) this.sectionPaints.get(key);
                     if (p == null) {
@@ -485,10 +483,10 @@
             }
         }
         else {
-            // row keys provide potential keys for individual pies
+            // row keys provide potential keys for individual pies            
             for (int r = 0; r < this.dataset.getRowCount(); r++) {
                 Comparable key = this.dataset.getRowKey(r);
-                Paint p = piePlot.getSectionPaint(key);
+                Paint p = piePlot.getSectionPaint(key); 
                 if (p == null) {
                     p = (Paint) this.sectionPaints.get(key);
                     if (p == null) {
@@ -529,8 +527,8 @@
                     String label = key.toString();
                     String description = label;
                     Paint paint = (Paint) this.sectionPaints.get(key);
-                    LegendItem item = new LegendItem(label, description,
-                            null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE,
+                    LegendItem item = new LegendItem(label, description, 
+                            null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE, 
                             paint, Plot.DEFAULT_OUTLINE_STROKE, paint);
                     item.setDataset(getDataset());
                     result.add(item);
@@ -538,56 +536,56 @@
                 }
             }
             if (this.limit > 0.0) {
-                result.add(new LegendItem(this.aggregatedItemsKey.toString(),
-                        this.aggregatedItemsKey.toString(), null, null,
-                        Plot.DEFAULT_LEGEND_ITEM_CIRCLE,
+                result.add(new LegendItem(this.aggregatedItemsKey.toString(), 
+                        this.aggregatedItemsKey.toString(), null, null, 
+                        Plot.DEFAULT_LEGEND_ITEM_CIRCLE, 
                         this.aggregatedItemsPaint,
-                        Plot.DEFAULT_OUTLINE_STROKE,
+                        Plot.DEFAULT_OUTLINE_STROKE, 
                         this.aggregatedItemsPaint));
             }
         }
         return result;
     }
-
+    
     /**
-     * Tests this plot for equality with an arbitrary object.  Note that the
+     * Tests this plot for equality with an arbitrary object.  Note that the 
      * plot's dataset is not considered in the equality test.
-     *
+     * 
      * @param obj  the object (<code>null</code> permitted).
-     *
+     * 
      * @return <code>true</code> if this plot is equal to <code>obj</code>, and
      *     <code>false</code> otherwise.
      */
     public boolean equals(Object obj) {
         if (obj == this) {
-            return true;
+            return true;   
         }
         if (!(obj instanceof MultiplePiePlot)) {
-            return false;
+            return false;   
         }
         MultiplePiePlot that = (MultiplePiePlot) obj;
         if (this.dataExtractOrder != that.dataExtractOrder) {
-            return false;
+            return false;   
         }
         if (this.limit != that.limit) {
-            return false;
+            return false;   
         }
         if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {
             return false;
         }
-        if (!PaintUtilities.equal(this.aggregatedItemsPaint,
+        if (!PaintUtilities.equal(this.aggregatedItemsPaint, 
                 that.aggregatedItemsPaint)) {
             return false;
         }
         if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) {
-            return false;
+            return false;   
         }
         if (!super.equals(obj)) {
-            return false;
+            return false;   
         }
         return true;
     }
-
+    
     /**
      * Provides serialization support.
      *
@@ -608,12 +606,12 @@
      * @throws IOException  if there is an I/O error.
      * @throws ClassNotFoundException  if there is a classpath problem.
      */
-    private void readObject(ObjectInputStream stream)
+    private void readObject(ObjectInputStream stream) 
         throws IOException, ClassNotFoundException {
         stream.defaultReadObject();
         this.aggregatedItemsPaint = SerialUtilities.readPaint(stream);
         this.sectionPaints = new HashMap();
     }
 
-
+    
 }
