diff --git a/com/google/javascript/jscomp/CheckSideEffects.java b/com/google/javascript/jscomp/CheckSideEffects.java
index 722d225..ee0fc6d 100644
--- a/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/com/google/javascript/jscomp/CheckSideEffects.java
@@ -95,23 +95,58 @@ final class CheckSideEffects extends AbstractPostOrderCallback
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult() || n.isBlock()) {
-      return;
-    }
+    int pt = parent.getType();
+    if (pt == Token.COMMA) {
+      Node gramps = parent.getParent();
+      if (gramps.isCall() &&
+          parent == gramps.getFirstChild()) {
+        // Semantically, a direct call to eval is different from an indirect
+        // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first
+        // expression to a comma to be a no-op if it's used to indirect
+        // an eval.
+        if (n == parent.getFirstChild() &&
+            parent.getChildCount() == 2 &&
+            n.getNext().isName() &&
+            "eval".equals(n.getNext().getString())) {
+          return;
+        }
+      }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {
-      return;
+      if (n == parent.getLastChild()) {
+        for (Node an : parent.getAncestors()) {
+          int ancestorType = an.getType();
+          if (ancestorType == Token.COMMA)
+            continue;
+          if (ancestorType != Token.EXPR_RESULT &&
+              ancestorType != Token.BLOCK)
+            return;
+          else
+            break;
+        }
+      }
+    } else if (pt != Token.EXPR_RESULT && pt != Token.BLOCK) {
+      if (pt == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() ||
+           n == parent.getFirstChild().getNext().getNext())) {
+        // Fall through and look for warnings for the 1st and 3rd child
+        // of a for.
+      } else {
+        return;  // it might be OK to not have a side-effect
+      }
     }
 
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    if (isSimpleOp ||
+        !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+      if (n.isQualifiedName() && n.getJSDocInfo() != null) {
+        // This no-op statement was there so that JSDoc information could
+        // be attached to the name. This check should not complain about it.
+        return;
+      } else if (n.isExprResult()) {
+        // we already reported the problem when we visited the child.
+        return;
+      }
+
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
diff --git a/com/google/javascript/jscomp/NodeUtil.java b/com/google/javascript/jscomp/NodeUtil.java
index 00e31e0..5de1e6f 100644
--- a/com/google/javascript/jscomp/NodeUtil.java
+++ b/com/google/javascript/jscomp/NodeUtil.java
@@ -3111,7 +3111,6 @@ public final class NodeUtil {
     // TODO(johnlenz): consider sharing some code with trySimpleUnusedResult.
     Node parent = expr.getParent();
     switch (parent.getType()) {
-      case Token.BLOCK:
       case Token.EXPR_RESULT:
         return false;
       case Token.HOOK:
@@ -3120,21 +3119,6 @@ public final class NodeUtil {
         return (expr == parent.getFirstChild())
             ? true : isExpressionResultUsed(parent);
       case Token.COMMA:
-        Node gramps = parent.getParent();
-        if (gramps.isCall() &&
-            parent == gramps.getFirstChild()) {
-          // Semantically, a direct call to eval is different from an indirect
-          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first
-          // expression to a comma to be a no-op if it's used to indirect
-          // an eval. This we pretend that this is "used".
-          if (expr == parent.getFirstChild() &&
-              parent.getChildCount() == 2 &&
-              expr.getNext().isName() &&
-              "eval".equals(expr.getNext().getString())) {
-            return true;
-          }
-        }
-
         return (expr == parent.getFirstChild())
             ? false : isExpressionResultUsed(parent);
       case Token.FOR:
