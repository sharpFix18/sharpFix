diff --git a/com/google/javascript/jscomp/TypeCheck.java b/com/google/javascript/jscomp/TypeCheck.java
index 5edb4f0..74f1564 100644
--- a/com/google/javascript/jscomp/TypeCheck.java
+++ b/com/google/javascript/jscomp/TypeCheck.java
@@ -226,11 +226,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
           "Interface {0} has a property {1} with incompatible types in " +
           "its super interfaces {2} and {3}");
 
-  static final DiagnosticType EXPECTED_THIS_TYPE =
-      DiagnosticType.warning(
-          "JSC_EXPECTED_THIS_TYPE",
-          "\"{0}\" must be called with a \"this\" type");
-
   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
       DETERMINISTIC_TEST,
       DETERMINISTIC_TEST_NO_RESULT,
@@ -259,7 +254,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       WRONG_ARGUMENT_COUNT,
       ILLEGAL_IMPLICIT_CAST,
       INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-      EXPECTED_THIS_TYPE,
       RhinoErrorReporter.TYPE_PARSE_ERROR,
       TypedScopeCreator.UNKNOWN_LENDS,
       TypedScopeCreator.LENDS_ON_NON_OBJECT,
@@ -1575,16 +1569,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-      if (functionType.isOrdinaryFunction() &&
-          !functionType.getTypeOfThis().isUnknownType() &&
-          !functionType.getTypeOfThis().isNativeObjectType() &&
-          !(child.getType() == Token.GETELEM ||
-            child.getType() == Token.GETPROP)) {
-        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
-      }
-
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
