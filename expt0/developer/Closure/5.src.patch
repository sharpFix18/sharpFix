diff --git a/com/google/javascript/jscomp/InlineObjectLiterals.java b/com/google/javascript/jscomp/InlineObjectLiterals.java
index d03988c..afaf88a 100644
--- a/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -160,23 +160,17 @@ class InlineObjectLiterals implements CompilerPass {
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore most indirect references, like x.y (but not x.y(),
-        // since the function referenced by y might reference 'this').
+        // Ignore indirect references, like x.y (except x.y(), since
+        // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
-          // A call target may be using the object as a 'this' value.
+          // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
-          // Deleting a property has different semantics from deleting
-          // a variable, so deleted properties should not be inlined.
-          if (gramps.isDelProp()) {
-            return false;
-          }
-
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
