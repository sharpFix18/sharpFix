diff --git a/com/google/javascript/jscomp/Normalize.java b/com/google/javascript/jscomp/Normalize.java
index 1db94e2..4aa4555 100644
--- a/com/google/javascript/jscomp/Normalize.java
+++ b/com/google/javascript/jscomp/Normalize.java
@@ -86,12 +86,12 @@ class Normalize implements CompilerPass, Callback {
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
-    removeDuplicateDeclarations(root);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
+    removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
   }
diff --git a/com/google/javascript/jscomp/SyntacticScopeCreator.java b/com/google/javascript/jscomp/SyntacticScopeCreator.java
index db99202..bb3e388 100644
--- a/com/google/javascript/jscomp/SyntacticScopeCreator.java
+++ b/com/google/javascript/jscomp/SyntacticScopeCreator.java
@@ -37,10 +37,6 @@ class SyntacticScopeCreator implements ScopeCreator {
   private String sourceName;
   private final RedeclarationHandler redeclarationHandler;
 
-  // The arguments variable is special, in that it's declared in every local
-  // scope, but not explicitly declared.
-  private static final String ARGUMENTS = "arguments";
-
   public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =
       DiagnosticType.error(
           "JSC_VAR_MULTIPLY_DECLARED_ERROR",
@@ -201,7 +197,7 @@ class SyntacticScopeCreator implements ScopeCreator {
           info = parent.getJSDocInfo();
         }
         allowDupe =
-            info != null && info.getSuppressions().contains("duplicate");
+          info != null && info.getSuppressions().contains("duplicate");
 
         if (!allowDupe) {
           compiler.report(
@@ -230,8 +226,7 @@ class SyntacticScopeCreator implements ScopeCreator {
   private void declareVar(String name, Node n, Node parent,
                           Node gramps, JSType declaredType,
                           Node nodeWithLineNumber) {
-    if (scope.isDeclared(name, false)
-        || (scope.isLocal() && name.equals(ARGUMENTS))) {
+    if (scope.isDeclared(name, false)) {
       redeclarationHandler.onRedeclaration(
           scope, name, n, parent, gramps, nodeWithLineNumber);
     } else {
