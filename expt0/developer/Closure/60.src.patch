diff --git a/com/google/javascript/jscomp/NodeUtil.java b/com/google/javascript/jscomp/NodeUtil.java
index 43a296f..7abdbae 100644
--- a/com/google/javascript/jscomp/NodeUtil.java
+++ b/com/google/javascript/jscomp/NodeUtil.java
@@ -105,9 +105,6 @@ public final class NodeUtil {
         // ignoring side-effects
         return TernaryValue.TRUE;
 
-      case Token.VOID:
-        return TernaryValue.FALSE;
-
       default:
         return getPureBooleanValue(n);
     }
@@ -132,13 +129,8 @@ public final class NodeUtil {
 
       case Token.NULL:
       case Token.FALSE:
-        return TernaryValue.FALSE;
-
       case Token.VOID:
-        if (!mayHaveSideEffects(n.getFirstChild())) {
-          return TernaryValue.FALSE;
-        }
-        break;
+        return TernaryValue.FALSE;
 
       case Token.NAME:
         String name = n.getString();
@@ -161,7 +153,6 @@ public final class NodeUtil {
         if (!mayHaveSideEffects(n)) {
           return TernaryValue.TRUE;
         }
-        break;
     }
 
     return TernaryValue.UNKNOWN;
diff --git a/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java b/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java
index d8be2fd..a9c1250 100644
--- a/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java
+++ b/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java
@@ -134,7 +134,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
    * @return the replacement node, if changed, or the original if not
    */
   private Node tryFoldExpr(Node subtree) {
-    Node result = trySimplifyUnusedResult(subtree.getFirstChild());
+    Node result = trySimpilifyUnusedResult(subtree.getFirstChild());
     if (result == null) {
       Node parent = subtree.getParent();
       // If the EXPR_RESULT no longer has any children, remove it as well.
@@ -155,8 +155,8 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
    * @param n The root of the expression to simplify.
    * @return The replacement node, or null if the node was is not useful.
    */
-  private Node trySimplifyUnusedResult(Node n) {
-    return trySimplifyUnusedResult(n, true);
+  private Node trySimpilifyUnusedResult(Node n) {
+    return trySimpilifyUnusedResult(n, true);
   }
 
   /**
@@ -166,14 +166,14 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
    *     it is not useful, otherwise it replaced with an EMPTY node.
    * @return The replacement node, or null if the node was is not useful.
    */
-  private Node trySimplifyUnusedResult(Node n, boolean removeUnused) {
+  private Node trySimpilifyUnusedResult(Node n, boolean removeUnused) {
     Node result = n;
 
     // Simplify the results of conditional expressions
     switch (n.getType()) {
       case Token.HOOK:
-        Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
-        Node falseNode = trySimplifyUnusedResult(n.getLastChild());
+        Node trueNode = trySimpilifyUnusedResult(n.getFirstChild().getNext());
+        Node falseNode = trySimpilifyUnusedResult(n.getLastChild());
         // If one or more of the conditional children were removed,
         // transform the HOOK to an equivalent operation:
         //    x() ? foo() : 1 --> x() && foo()
@@ -187,7 +187,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
           n.setType(Token.AND);
           Preconditions.checkState(n.getChildCount() == 2);
         } else if (trueNode == null && falseNode == null) {
-          result = trySimplifyUnusedResult(n.getFirstChild());
+          result = trySimpilifyUnusedResult(n.getFirstChild());
         } else {
           // The structure didn't change.
           result = n;
@@ -198,13 +198,13 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
         // Try to remove the second operand from a AND or OR operations:
         //    x() || f --> x()
         //    x() && f --> x()
-        Node conditionalResultNode = trySimplifyUnusedResult(
+        Node conditionalResultNode = trySimpilifyUnusedResult(
             n.getLastChild());
         if (conditionalResultNode == null) {
           Preconditions.checkState(n.hasOneChild());
           // The conditionally executed code was removed, so
           // replace the AND/OR with its LHS or remove it if it isn't useful.
-          result = trySimplifyUnusedResult(n.getFirstChild());
+          result = trySimpilifyUnusedResult(n.getFirstChild());
         }
         break;
       case Token.FUNCTION:
@@ -217,8 +217,8 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
         // get split into individual EXPR_RESULT statement, if possible), so
         // we special case COMMA (we don't want to rewrite COMMAs as new COMMAs
         // nodes.
-        Node left = trySimplifyUnusedResult(n.getFirstChild());
-        Node right = trySimplifyUnusedResult(n.getLastChild());
+        Node left = trySimpilifyUnusedResult(n.getFirstChild());
+        Node right = trySimpilifyUnusedResult(n.getLastChild());
         if (left == null && right == null) {
           result = null;
         } else if (left == null) {
@@ -237,7 +237,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
           Node resultList = null;
           for (Node next, c = n.getFirstChild(); c != null; c = next) {
             next = c.getNext();
-            c = trySimplifyUnusedResult(c);
+            c = trySimpilifyUnusedResult(c);
             if (c != null) {
               c.detachFromParent();
               if (resultList == null)  {
@@ -443,7 +443,7 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
     Node left = n.getFirstChild();
     Node right = left.getNext();
 
-    left = trySimplifyUnusedResult(left);
+    left = trySimpilifyUnusedResult(left);
     if (left == null || !mayHaveSideEffects(left)) {
       // Fold it!
       n.removeChild(right);
@@ -780,11 +780,11 @@ class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {
     Node increment = cond.getNext();
 
     if (init.getType() != Token.EMPTY && init.getType() != Token.VAR) {
-      init = trySimplifyUnusedResult(init, false);
+      init = trySimpilifyUnusedResult(init, false);
     }
 
     if (increment.getType() != Token.EMPTY) {
-      increment = trySimplifyUnusedResult(increment, false);
+      increment = trySimpilifyUnusedResult(increment, false);
     }
 
     // There is an initializer skip it
