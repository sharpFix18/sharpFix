diff --git a/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/com/google/javascript/jscomp/DeadAssignmentsElimination.java
index 879056f..e07b5fc 100644
--- a/com/google/javascript/jscomp/DeadAssignmentsElimination.java
+++ b/com/google/javascript/jscomp/DeadAssignmentsElimination.java
@@ -293,7 +293,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements
       for(Node sibling = n.getNext(); sibling != null;
           sibling = sibling.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {
-          VariableLiveness state = isVariableReadBeforeKill(sibling, variable);
+          VariableLiveness state = readVariableBeforeKilling(sibling, variable);
 
           // If we see a READ or KILL there is no need to continue.
           if (state == VariableLiveness.READ) {
@@ -316,34 +316,25 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements
   }
 
   /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
+   * Give an expression and a variable. It returns READ, if the right-most
+   * reference of that variable is a read. It returns KILL, if the right-most
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   *
+   * This need to be a pre-order traversal so we cannot use the normal node
+   * traversals.
    */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+  private VariableLiveness readVariableBeforeKilling(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        Node rhs = n.getNext();
-        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
-        if (state == VariableLiveness.READ) {
-          return state;
-        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
-
-    // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        VariableLiveness state = readVariableBeforeKilling(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
