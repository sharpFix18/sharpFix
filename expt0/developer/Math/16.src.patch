diff --git a/org/apache/commons/math3/util/FastMath.java b/org/apache/commons/math3/util/FastMath.java
index fd1ce2d..22ed157 100644
--- a/org/apache/commons/math3/util/FastMath.java
+++ b/org/apache/commons/math3/util/FastMath.java
@@ -78,8 +78,6 @@ import java.io.PrintStream;
  * @since 2.2
  */
 public class FastMath {
-    /** StrictMath.log(Double.MAX_VALUE): {@value} */
-    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
 
     /** Archimede's constant PI, ratio of circle circumference to diameter. */
     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;
@@ -391,25 +389,15 @@ public class FastMath {
       // for numbers with magnitude 20 or so,
       // exp(-z) can be ignored in comparison with exp(z)
 
-      if (x > 20) {
-          if (x >= LOG_MAX_VALUE) {
-              // Avoid overflow (MATH-905).
-              final double t = exp(0.5 * x);
-              return (0.5 * t) * t;
-          } else {
-              return 0.5 * exp(x);
-          }
-      } else if (x < -20) {
-          if (x <= -LOG_MAX_VALUE) {
-              // Avoid overflow (MATH-905).
-              final double t = exp(-0.5 * x);
-              return (0.5 * t) * t;
-          } else {
-              return 0.5 * exp(-x);
-          }
+      if (x > 20.0) {
+          return exp(x)/2.0;
+      }
+
+      if (x < -20) {
+          return exp(-x)/2.0;
       }
 
-      final double hiPrec[] = new double[2];
+      double hiPrec[] = new double[2];
       if (x < 0.0) {
           x = -x;
       }
@@ -461,22 +449,12 @@ public class FastMath {
       // for values of z larger than about 20,
       // exp(-z) can be ignored in comparison with exp(z)
 
-      if (x > 20) {
-          if (x >= LOG_MAX_VALUE) {
-              // Avoid overflow (MATH-905).
-              final double t = exp(0.5 * x);
-              return (0.5 * t) * t;
-          } else {
-              return 0.5 * exp(x);
-          }
-      } else if (x < -20) {
-          if (x <= -LOG_MAX_VALUE) {
-              // Avoid overflow (MATH-905).
-              final double t = exp(-0.5 * x);
-              return (-0.5 * t) * t;
-          } else {
-              return -0.5 * exp(-x);
-          }
+      if (x > 20.0) {
+          return exp(x)/2.0;
+      }
+
+      if (x < -20) {
+          return -exp(-x)/2.0;
       }
 
       if (x == 0) {
