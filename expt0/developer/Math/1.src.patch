diff --git a/org/apache/commons/math3/fraction/BigFraction.java b/org/apache/commons/math3/fraction/BigFraction.java
index 4ca33eb..5b0a6b4 100644
--- a/org/apache/commons/math3/fraction/BigFraction.java
+++ b/org/apache/commons/math3/fraction/BigFraction.java
@@ -301,11 +301,6 @@ public class BigFraction
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
             if ((p2 > overflow) || (q2 > overflow)) {
-                // in maxDenominator mode, if the last fraction was very close to the actual value
-                // q2 may overflow in the next iteration; in this case return the last one.
-                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
-                    break;
-                }
                 throw new FractionConversionException(value, p2, q2);
             }
 
diff --git a/org/apache/commons/math3/fraction/Fraction.java b/org/apache/commons/math3/fraction/Fraction.java
index 002dae9..08d3b95 100644
--- a/org/apache/commons/math3/fraction/Fraction.java
+++ b/org/apache/commons/math3/fraction/Fraction.java
@@ -83,9 +83,6 @@ public class Fraction
     /** Serializable version identifier */
     private static final long serialVersionUID = 3698073679419233275L;
 
-    /** The default epsilon used for convergence. */
-    private static final double DEFAULT_EPSILON = 1e-5;
-
     /** The denominator. */
     private final int denominator;
 
@@ -99,7 +96,7 @@ public class Fraction
      *         converge.
      */
     public Fraction(double value) throws FractionConversionException {
-        this(value, DEFAULT_EPSILON, 100);
+        this(value, 1.0e-5, 100);
     }
 
     /**
@@ -208,13 +206,7 @@ public class Fraction
             long a1 = (long)FastMath.floor(r1);
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-
             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {
-                // in maxDenominator mode, if the last fraction was very close to the actual value
-                // q2 may overflow in the next iteration; in this case return the last one.
-                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
-                    break;
-                }
                 throw new FractionConversionException(value, p2, q2);
             }
 
