diff --git a/org/apache/commons/math/analysis/BrentSolver.java b/org/apache/commons/math/analysis/BrentSolver.java
index da8b3f5..01a9ee5 100644
--- a/org/apache/commons/math/analysis/BrentSolver.java
+++ b/org/apache/commons/math/analysis/BrentSolver.java
@@ -128,41 +128,20 @@ public class BrentSolver extends UnivariateRealSolverImpl {
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
         // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign > 0) {
-            // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
-                ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
-                        "  Endpoints: [" + min + "," + max + "]" + 
-                        "  Values: [" + yMin + "," + yMax + "]");
-            }
-        } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-        } else {
-            // either min or max is a root
-            if (yMin == 0.0) {
-                ret = min;
-            } else {
-                ret = max;
-            }
+        if (yMin * yMax >= 0) {
+            throw new IllegalArgumentException
+            ("Function values at endpoints do not have different signs." +
+                    "  Endpoints: [" + min + "," + max + "]" + 
+                    "  Values: [" + yMin + "," + yMax + "]");       
         }
 
-        return ret;
+        // solve using only the first endpoint as initial guess
+        return solve(min, yMin, max, yMax, min, yMin);
+
     }
         
     /**
