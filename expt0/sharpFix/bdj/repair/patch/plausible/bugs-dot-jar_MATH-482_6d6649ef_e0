*** /home/qx5/elixir_bdj_bugs/math/bugs-dot-jar_MATH-482_6d6649ef//src/main/java/org/apache/commons/math/util/FastMath.java	Fri Jun 22 06:20:13 2018
--- /home/qx5/sharpfix_expts_bdj/repair/repairflag2_faulocflag0_cignoreflag0/bugs-dot-jar_MATH-482_6d6649ef/e0/f1/repair/c25/p0/FastMath.java	Fri Jul 13 00:04:26 2018
***************
*** 904,910 ****
       *  For x between 0 and 1, returns exp(x), uses extended precision
       *  @param x argument of exponential
       *  @param result placeholder where to place exp(x) split in two terms
!      *  for extra precision (i.e. exp(x) = result[0] Â° result[1]
       *  @return exp(x)
       */
      private static double slowexp(final double x, final double result[]) {
--- 904,910 ----
       *  For x between 0 and 1, returns exp(x), uses extended precision
       *  @param x argument of exponential
       *  @param result placeholder where to place exp(x) split in two terms
!      *  for extra precision (i.e. exp(x) = result[0] ?? result[1]
       *  @return exp(x)
       */
      private static double slowexp(final double x, final double result[]) {
***************
*** 3479,3485 ****
       * @return b if a is lesser or equal to b, a otherwise
       */
      public static float max(final float a, final float b) {
!         return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
      }
  
      /** Compute the maximum of two values
--- 3479,3485 ----
       * @return b if a is lesser or equal to b, a otherwise
       */
      public static float max(final float a, final float b) {
!         return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);
      }
  
      /** Compute the maximum of two values
