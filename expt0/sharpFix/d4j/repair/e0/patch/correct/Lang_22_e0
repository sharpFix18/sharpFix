*** /home/qx5/defects4j_bugs/bugs/langs/projs/Lang_22_buggy/src/main/java/org/apache/commons/lang3/math/Fraction.java	Mon May  9 11:38:22 2016
--- /home/qx5/sharpfix_expts/repair/repairflag2_faulocflag0_cignoreflag0/Lang_22/e0/f12/repair/c7/m0/p0/Fraction.java	Thu Feb  1 22:12:38 2018
***************
*** 579,625 ****
       * @return the greatest common divisor, never zero
       */
      private static int greatestCommonDivisor(int u, int v) {
!         //if either op. is abs 0 or 1, return 1:
! 	if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
!             return 1;
!         }
!         // keep u and v negative, as negative integers range down to
!         // -2^31, while positive numbers can only be as large as 2^31-1
!         // (i.e. we can't necessarily negate a negative number without
!         // overflow)
!         if (u>0) { u=-u; } // make u negative
!         if (v>0) { v=-v; } // make v negative
!         // B1. [Find power of 2]
!         int k=0;
!         while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...
!             u/=2; v/=2; k++; // cast out twos.
!         }
!         if (k==31) {
!             throw new ArithmeticException("overflow: gcd is 2^31");
!         }
!         // B2. Initialize: u and v have been divided by 2^k and at least
!         //     one is odd.
!         int t = ((u&1)==1) ? v : -(u/2)/*B3*/;
!         // t negative: u was odd, v may be even (t replaces v)
!         // t positive: u was even, v is odd (t replaces u)
!         do {
!             /* assert u<0 && v<0; */
!             // B4/B3: cast out twos from t.
!             while ((t&1)==0) { // while t is even..
!                 t/=2; // cast out twos
!             }
!             // B5 [reset max(u,v)]
!             if (t>0) {
!                 u = -t;
!             } else {
!                 v = t;
!             }
!             // B6/B3. at this point both u and v should be odd.
!             t = (v - u)/2;
!             // |u| larger: t positive (replace u)
!             // |v| larger: t negative (replace v)
!         } while (t!=0);
!         return -u*(1<<k); // gcd is u*2^k
      }
  
      // Arithmetic
--- 579,622 ----
       * @return the greatest common divisor, never zero
       */
      private static int greatestCommonDivisor(int u, int v) {
!         
! if (u == 0 || v == 0) {
! 			if (u == Integer.MIN_VALUE || v == Integer.MIN_VALUE) {
! 				throw new ArithmeticException("overflow: gcd is 2^31");
! 			}
! 			return Math.abs(u) + Math.abs(v);
! 		}
! 		if (Math.abs(u) == 1 || Math.abs(v) == 1) {
! 			return 1;
! 		}
! 		if (u > 0) {
! 			u = -u;
! 		}
! 		if (v > 0) {
! 			v = -v;
! 		}
! 		int k = 0;
! 		while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {
! 			u /= 2;
! 			v /= 2;
! 			k++;
! 		}
! 		if (k == 31) {
! 			throw new ArithmeticException("overflow: gcd is 2^31");
! 		}
! 		int t = (u & 1) == 1 ? v : -(u / 2);
! 		do {
! 			while ((t & 1) == 0) {
! 				t /= 2;
! 			}
! 			if (t > 0) {
! 				u = -t;
! 			} else {
! 				v = t;
! 			}
! 			t = (v - u) / 2;
! 		} while (t != 0);
! 		return -u * (1 << k);
      }
  
      // Arithmetic
