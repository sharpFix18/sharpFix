*** /home/qx5/defects4j_bugs/bugs/langs/projs/Lang_17_buggy/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	Mon Feb 20 16:47:29 2017
--- /home/qx5/sharpfix_expts/repair/repairflag2_faulocflag0_cignoreflag0/Lang_17/e0/f12/repair/c1/m0/p0/CharSequenceTranslator.java	Sun Feb  4 07:26:17 2018
***************
*** 74,107 ****
       */
      public final void translate(CharSequence input, Writer out) throws IOException {
          if (out == null) {
!             throw new IllegalArgumentException("The Writer must not be null");
!         }
!         if (input == null) {
!             return;
!         }
!         int sz = Character.codePointCount(input, 0, input.length());
!         for (int i = 0; i < sz; i++) {
! 
!             // consumed is the number of codepoints consumed
!             int consumed = translate(input, i, out);
! 
!             if (consumed == 0) {
!                 out.write(Character.toChars(Character.codePointAt(input, i)));
!             } else {
! //          // contract with translators is that they have to understand codepoints 
! //          // and they just took care of a surrogate pair
!                 for (int j = 0; j < consumed; j++) {
!                     if (i < sz - 2) {
!                         i += Character.charCount(Character.codePointAt(input, i));
!                     } else {
!                         // If the String ends with a high surrogate, just add the 1 and don't worry about such things
!                         i++;
!                     }
!                 }
!                 // for loop will increment 1 anyway, so remove 1 to account for that
!                 i--;
!             }
!         }
      }
  
      /**
--- 74,98 ----
       */
      public final void translate(CharSequence input, Writer out) throws IOException {
          if (out == null) {
! 			throw new IllegalArgumentException("The Writer must not be null");
! 		}
! 		if (input == null) {
! 			return;
! 		}
! 		int i = 0;
! 		int len = input.length();
! 		while (i < len) {
! 			int consumed = translate(input, i, out);
! 			if (consumed == 0) {
! 				char[] c = Character.toChars(Character.codePointAt(input, i));
! 				out.write(c);
! 				i += c.length;
! 				continue;
! 			}
! 			for (int pt = 0; pt < consumed; pt++) {
! 				i += Character.charCount(Character.codePointAt(input, i));
! 			}
! 		}
      }
  
      /**
